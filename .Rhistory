col.names=T,
row.names=F)
write.csv(transactions_stored,
"~/Scheduled/budget/transactions_stored.csv",
col.names=T,
row.names=F)
}
# Action pay
need_to_action_pay <- abs(difftime(pay_date,
today_date,
units="hours"))<24
if(need_to_action_pay){
# Figure out which pay we're using
if(rebuild_remaining>0){
pay <- pay_rebuild
rebuild_remaining <- rebuild_remaining-1
}
if(rebuild_remaining<=0){
pay <- pay_steady
}
# Update the account positions
account_positions <- merge(account_positions,
pay,
by="account",
sort=F)
account_positions$value <- account_positions$value.x+account_positions$value.y
account_positions <- account_positions[,c("account","value")]
# Update pay date
pay_date_next  <- pay_date+(60*60*24*14)
# Save to file
write.csv(account_positions,
"~/Scheduled/budget/account_positions.csv",
col.names=T,
row.names=F)
pay_date_next_c <- gsub("-","",pay_date_next)
pay_date_next_c <- substr(as.character(pay_date_next_c),1,8)
writeLines(pay_date_next_c,
"~/Scheduled/budget/pay_date.txt")
writeLines(paste0("Next pay: ",pay_date_next_c),
"~/Scheduled/budget/pay_date_dashboard.txt")
writeLines(as.character(rebuild_remaining),
"~/Scheduled/budget/rebuild_remaining.txt")
}
# Write summary of account positions, formatted for dashboard
account_positions_dashboard <- paste(account_positions$account,
"=",
account_positions$value,
",",
collapse="")
budget_ascii <- r"{
___         _          _
| _ )_  _ __| |__ _ ___| |_
| _ \ || / _` / _` / -_)  _|
|___/\_,_\__,_\__, \___|\__|
|___/
}"
writeLines(paste0(budget_ascii,account_positions_dashboard),
"~/Scheduled/budget/account_positions_dashboard.txt")
rm(list=ls())
# Set up variables
today_date <- as.POSIXct(Sys.Date(),tz="ACST")
today_date_c <- gsub("-","",today_date)
filenames <- list.files(path="~/Scheduled/budget/")
filenames_absolute <- paste0("~/Scheduled/budget/",filenames)
stamp <- gsub("-","",Sys.time())
stamp <- gsub(":","",stamp)
stamp <- gsub(" ","",stamp)
# Create a backup of all files
backup_dir <- paste0("~/Scheduled/budget/backups/.backup_",stamp,"/")
dir.create(backup_dir)
file.copy(from=filenames_absolute,
to=backup_dir)
# Import account file
account_positions <- read.csv("~/Scheduled/budget/account_positions.csv",header=T)
# Import transactions file
transactions_action <- read.csv("~/Scheduled/budget/transactions_action.csv",header=T)
transactions_stored <- read.csv("~/Scheduled/budget/transactions_stored.csv",header=T)
# Import next pay file
pay_rebuild <- read.csv("~/Scheduled/budget/pay_rebuild.csv",header=T)
pay_steady <- read.csv("~/Scheduled/budget/pay_steady.csv",header=T)
pay_date_c <- readLines("~/Scheduled/budget/pay_date.txt")
pay_date <- as.POSIXct(pay_date_c, format="%Y%m%d")
rebuild_remaining <- as.numeric(readLines("~/Scheduled/budget/rebuild_remaining.txt"))
# Action transactions
need_to_action_transactions <- nrow(transactions_action)>1
if(need_to_action_transactions){
transactions_action_2 <- transactions_action
transactions_action <- transactions_action[-1,]
transactions_stored <- rbind(transactions_stored,transactions_action)
transactions_sum <- aggregate(value~account,FUN=sum,data=transactions_action)
account_positions <- merge(account_positions,
transactions_sum,
by="account",
sort=F,
all=T)
account_positions$value <- rowSums(account_positions[,c("value.x","value.y")],
na.rm=T)
account_positions <- account_positions[,c("account","value")]
transactions_action <- transactions_action_2[1,]
# Save to file
write.csv(account_positions,
"~/Scheduled/budget/account_positions.csv",
col.names=T,
row.names=F)
write.csv(transactions_action,
"~/Scheduled/budget/transactions_action.csv",
col.names=T,
row.names=F)
write.csv(transactions_stored,
"~/Scheduled/budget/transactions_stored.csv",
col.names=T,
row.names=F)
}
# Action pay
need_to_action_pay <- abs(difftime(pay_date,
today_date,
units="hours"))<24
if(need_to_action_pay){
# Figure out which pay we're using
if(rebuild_remaining>0){
pay <- pay_rebuild
rebuild_remaining <- rebuild_remaining-1
}
if(rebuild_remaining<=0){
pay <- pay_steady
}
# Update the account positions
account_positions <- merge(account_positions,
pay,
by="account",
sort=F)
account_positions$value <- account_positions$value.x+account_positions$value.y
account_positions <- account_positions[,c("account","value")]
# Update pay date
pay_date_next  <- pay_date+(60*60*24*14)
# Save to file
write.csv(account_positions,
"~/Scheduled/budget/account_positions.csv",
col.names=T,
row.names=F)
pay_date_next_c <- gsub("-","",pay_date_next)
pay_date_next_c <- substr(as.character(pay_date_next_c),1,8)
writeLines(pay_date_next_c,
"~/Scheduled/budget/pay_date.txt")
writeLines(paste0("Next pay: ",pay_date_next_c),
"~/Scheduled/budget/pay_date_dashboard.txt")
writeLines(as.character(rebuild_remaining),
"~/Scheduled/budget/rebuild_remaining.txt")
}
# Write summary of account positions, formatted for dashboard
account_positions_dashboard <- paste(account_positions$account,
"=",
account_positions$value,
",",
collapse="")
budget_ascii <- r"{
___         _          _
| _ )_  _ __| |__ _ ___| |_
| _ \ || / _` / _` / -_)  _|
|___/\_,_\__,_\__, \___|\__|
|___/
}"
writeLines(paste0(budget_ascii,account_positions_dashboard),
"~/Scheduled/budget/account_positions_dashboard.txt")
rm(list=ls())
# Set up variables
today_date <- as.POSIXct(Sys.Date(),tz="ACST")
today_date_c <- gsub("-","",today_date)
filenames <- list.files(path="~/Scheduled/budget/")
filenames_absolute <- paste0("~/Scheduled/budget/",filenames)
stamp <- gsub("-","",Sys.time())
stamp <- gsub(":","",stamp)
stamp <- gsub(" ","",stamp)
# Create a backup of all files
backup_dir <- paste0("~/Scheduled/budget/backups/.backup_",stamp,"/")
dir.create(backup_dir)
file.copy(from=filenames_absolute,
to=backup_dir)
# Import account file
account_positions <- read.csv("~/Scheduled/budget/account_positions.csv",header=T)
# Import transactions file
transactions_action <- read.csv("~/Scheduled/budget/transactions_action.csv",header=T)
transactions_stored <- read.csv("~/Scheduled/budget/transactions_stored.csv",header=T)
# Import next pay file
pay_rebuild <- read.csv("~/Scheduled/budget/pay_rebuild.csv",header=T)
pay_steady <- read.csv("~/Scheduled/budget/pay_steady.csv",header=T)
pay_date_c <- readLines("~/Scheduled/budget/pay_date.txt")
pay_date <- as.POSIXct(pay_date_c, format="%Y%m%d")
rebuild_remaining <- as.numeric(readLines("~/Scheduled/budget/rebuild_remaining.txt"))
# Action transactions
need_to_action_transactions <- nrow(transactions_action)>1
if(need_to_action_transactions){
transactions_action_2 <- transactions_action
transactions_action <- transactions_action[-1,]
transactions_stored <- rbind(transactions_stored,transactions_action)
transactions_sum <- aggregate(value~account,FUN=sum,data=transactions_action)
account_positions <- merge(account_positions,
transactions_sum,
by="account",
sort=F,
all=T)
account_positions$value <- rowSums(account_positions[,c("value.x","value.y")],
na.rm=T)
account_positions <- account_positions[,c("account","value")]
transactions_action <- transactions_action_2[1,]
# Save to file
write.csv(account_positions,
"~/Scheduled/budget/account_positions.csv",
col.names=T,
row.names=F)
write.csv(transactions_action,
"~/Scheduled/budget/transactions_action.csv",
col.names=T,
row.names=F)
write.csv(transactions_stored,
"~/Scheduled/budget/transactions_stored.csv",
col.names=T,
row.names=F)
}
# Action pay
need_to_action_pay <- abs(difftime(pay_date,
today_date,
units="hours"))<24
if(need_to_action_pay){
# Figure out which pay we're using
if(rebuild_remaining>0){
pay <- pay_rebuild
rebuild_remaining <- rebuild_remaining-1
}
if(rebuild_remaining<=0){
pay <- pay_steady
}
# Update the account positions
account_positions <- merge(account_positions,
pay,
by="account",
sort=F)
account_positions$value <- account_positions$value.x+account_positions$value.y
account_positions <- account_positions[,c("account","value")]
# Update pay date
pay_date_next  <- pay_date+(60*60*24*14)
# Save to file
write.csv(account_positions,
"~/Scheduled/budget/account_positions.csv",
col.names=T,
row.names=F)
pay_date_next_c <- gsub("-","",pay_date_next)
pay_date_next_c <- substr(as.character(pay_date_next_c),1,8)
writeLines(pay_date_next_c,
"~/Scheduled/budget/pay_date.txt")
writeLines(paste0("Next pay: ",pay_date_next_c),
"~/Scheduled/budget/pay_date_dashboard.txt")
writeLines(as.character(rebuild_remaining),
"~/Scheduled/budget/rebuild_remaining.txt")
}
# Write summary of account positions, formatted for dashboard
account_positions_dashboard <- paste(account_positions$account,
"=",
account_positions$value,
",",
collapse="")
budget_ascii <- r"{
___         _          _
| _ )_  _ __| |__ _ ___| |_
| _ \ || / _` / _` / -_)  _|
|___/\_,_\__,_\__, \___|\__|
|___/
}"
writeLines(paste0(budget_ascii,account_positions_dashboard),
"~/Scheduled/budget/account_positions_dashboard.txt")
# Set up variables
today_date <- as.POSIXct(Sys.Date(),tz="ACST")
today_date_c <- gsub("-","",today_date)
filenames <- list.files(path="~/Scheduled/budget/budget_v5/")
filenames_absolute <- paste0("~/Scheduled/budget/budget_v5/",filenames)
stamp <- gsub("-","",Sys.time())
stamp <- gsub(":","",stamp)
stamp <- gsub(" ","",stamp)
# Import account file
account_positions <- read.csv("~/Scheduled/budget/budget_v5/account_positions.csv",header=T)
# Import transactions file
transactions_action <- read.csv("~/Scheduled/budget/budget_v5/transactions_action.csv",header=T)
transactions_stored <- read.csv("~/Scheduled/budget/budget_v5/transactions_stored.csv",header=T)
# Import next pay file
pay_steady <- read.csv("~/Scheduled/budget/budget_v5/pay_steady.csv",header=T)
pay_steady$proportion <- pay_steady$aud_month/sum(pay_steady$aud_month)
# Action transactions
need_to_action_transactions <- nrow(transactions_action)>1
# Calculate positions (theoretical and actual)
df_position_actual <- read.csv("~/Scheduled/budget/budget_v5/position_actual.txt")
position_actual <- sum(df_position_actual$value)
position_theoretical <- sum(account_positions$value)
######################
### Exchange rates ###
######################
# Load packages
if(!require(jsonlite)){
install.packages("jsonlite")
library(jsonlite)}
account_positions_dashboard <- account_positions$value
names(account_positions_dashboard) <- paste(account_positions$account)
account_positions_dashboard
toString(account_positions_dashboard)
account_positions$av_combined_for_dashboard <- paste0(account_positions$account,
" = ",
account_positions$value)
toString(account_positions$av_combined_for_dashboard)
#Set up environment
library(ggplot2) #For graphing
theme_set(theme_bw()) #Because I'm fashionable
library(dplyr) #I don't like it but it's important for a couple of lines
library(measurements) #For converting units
library(stringr) #For converting units
library(viridis) #To help graphing
library(gridExtra) #To help graphing
library(gt) #For generating tables
library(stringr) #For string manipulation
library(scales) # For visualisation
library(data.table) # For data manipulation
library(lubridate) # For data manipulation
library(rnaturalearth) #For world map international borders
library(rnaturalearthdata) #For world map international borders
library(terra) #For spatial data analysis
library(sf) #For spatial data analysis
library(tidyterra) #For graphing spatial data
library(flowmapper) #For mapping trade
##################
### Production ###
##################
# Load parameters
# Finfish biological parameters (especially slaughter weight)
parameters_finfish <- read.csv("~/finsight/parameters/finfish_parameters.csv")
# Shrimp biological parameters
# These aren't actually useful for Europe, which isn't a major shrimp producer
# But I'm keeping the code here so that it's easier to expand to shrimp-producing
# countries if we want to in the future
parameters_shrimp <- read.csv("~/finsight/parameters/shrimp_parameters.csv")
# Custom species groupings
species_custom <- read.csv("~/finsight/parameters/custom_species_categorisation.csv")
# The countries that we want to include
production_countries <- read.csv("~/finsight/parameters/production_countries.csv")
# Load FAO's country and species definitions
countries <- read.csv("~/finsight/data/CL_FI_COUNTRY_GROUPS.csv")
species <- read.csv("~/finsight/data/CL_FI_SPECIES_GROUPS.csv")
# Load FAO quantity and value production data
Aquaculture_Quantity <- read.csv("~/finsight/data/Aquaculture_Quantity.csv")
Aquaculture_Value <- read.csv("~/finsight/data/Aquaculture_Value.csv")
# Aggregate quantity and value across different *environments*
# (e.g. brackish, marine)
# as environment isn't relevant to us
# Note that this uses dplyr grammar (the only time I use such
# a method in this script)
Aquaculture_Quantity <- Aquaculture_Quantity %>%
group_by(COUNTRY.UN_CODE, SPECIES.ALPHA_3_CODE, PERIOD) %>%
mutate(VALUE_OLD = VALUE, VALUE = sum(VALUE_OLD))
Aquaculture_Quantity <- Aquaculture_Quantity[-which(base::duplicated(Aquaculture_Quantity[,c("COUNTRY.UN_CODE",
"SPECIES.ALPHA_3_CODE",
"PERIOD",
"VALUE")])),]
Aquaculture_Value <- Aquaculture_Value %>%
group_by(COUNTRY.UN_CODE, SPECIES.ALPHA_3_CODE, PERIOD) %>%
mutate(VALUE_OLD = VALUE, VALUE = sum(VALUE_OLD))
Aquaculture_Value <- Aquaculture_Value[-which(base::duplicated(Aquaculture_Value[,c("COUNTRY.UN_CODE",
"SPECIES.ALPHA_3_CODE",
"PERIOD",
"VALUE")])),]
# Merge into a single dataframe of FAO data (both quantity and value)
fao <- rbind(Aquaculture_Quantity,Aquaculture_Value)
# For the countries and species data frames,
# get just the columns we want
# and rename to the names used in the production data frame (fao)
countries <- countries[,c("UN_Code","Name_En","Continent_Group_En","ISO2_Code")]
names(countries) <- c("COUNTRY.UN_CODE","Country","Continent","ISO2_Code")
species <- species[,c("X3A_Code","Name_En","Scientific_Name","Major_Group")]
names(species) <- c("SPECIES.ALPHA_3_CODE","Species","Species_binomial","Species_group")
# Some of the countries have long names, and we can shorten these
countries[which(countries$ISO2_Code=="GB"),"Country"] <- "United Kingdom"
countries[which(countries$ISO2_Code=="NL"),"Country"] <- "Netherlands"
countries[which(countries$ISO2_Code=="MD"),"Country"] <- "Moldova"
# In the list of countries that we want to include, add the English name of the country
production_countries <- merge(production_countries,countries,
by="ISO2_Code",
all.x=T,all.y=F)
# Add the country and species columns to the production data (fao)
# Country columns
fao <- merge(fao,countries,by="COUNTRY.UN_CODE",all.x=T,all.y=F)
# Species columns
fao <- merge(fao,species,by="SPECIES.ALPHA_3_CODE",all.x=T,all.y=F)
# Our custom species definitions
fao <- merge(fao, species_custom, by="Species",all.x=T,all.y=F)
# Set all species that we didn't include in one of our categories to "Other
fao[which(is.na(fao$Species_custom)),"Species_custom"] <- "Other"
# REstrict the FAO data frame to only the countries in the list
# of countries that we specified
fao <- fao[which(fao$ISO2_Code %in% production_countries$ISO2_Code,),]
# Convert life durations to years (rather than days or months)
parameters_shrimp$Harvest_age_years <- parameters_shrimp$Harvest_age_days/365.25
parameters_finfish$Harvest_age_years <- parameters_finfish$Harvest_age_mo/12
# Check that all species in the parameters data frame
# are in the production data
# These should all show "TRUE"
parameters_finfish$Species %in% unique(species$Species)
parameters_shrimp$Species_binomial %in% unique(species$Species_binomial)
# Get the English species name for shrimp
parameters_shrimp <- merge(parameters_shrimp,species,by="Species_binomial",
all.x=T,all.y=F)
# Keep only the parameter columns we want, and merge into a single
# parameter data frame
parameters_finfish <- parameters_finfish[,c("Species","Harvest_weight_g","Harvest_age_years","Mortality_rate")]
parameters_shrimp <- parameters_shrimp[,c("Species","Harvest_weight_g","Harvest_age_years","Mortality_rate")]
parameters <- rbind(parameters_finfish,parameters_shrimp)
# Add the biological parameters to the production data (FAO)
fao <- merge(fao,parameters,by="Species",all.x=T,all.y=F)
# Get only fish and crustaceans (i.e. remove rows corresponding to bivalves, algae, etc)
fao <- fao[which(fao$Species_group %in% c("PISCES","CRUSTACEA","INVERTEBRATA AQUATICA")),]
# Separate again into quantity and value
fao_quantity <- fao[which(fao$MEASURE=="Q_tlw"),]
fao_value <- fao[which(fao$MEASURE=="V_USD_1000"),]
# Calculate individuals
# Note that we only do this for the rows where the measure is in tonnes
# (i.e. the rows that came from the quantity file rather than the value file)
# Individuals slaughtered = live production weight (converted from tonnes to grams) divided by average harvest weight
fao_quantity$Individuals_slaughtered <- (fao_quantity$VALUE*10^6)/fao_quantity$Harvest_weight_g
# Individuals hatched = individuals slaughtered divided by mortality rate
fao_quantity$Individuals_hatched <- fao_quantity$Individuals_slaughtered/fao_quantity$Mortality_rate
# Individuals alive at any one time = individuals slaughtered multiplied by harvest age
fao_quantity$Individuals_inventory <- fao_quantity$Individuals_slaughtered*fao_quantity$Harvest_age_years
# Get the most recent year in the data
production_recent_year <- max(fao_quantity$PERIOD)
# Restrict the data to only that year
# We'll keep "all years" data as fao_allyears for use later
fao_allyears <- fao_quantity
fao_quantity <- fao_allyears[which(fao_allyears$PERIOD==production_recent_year),]
# Create a sensible order of our custom species categories
# i.e. we'll turn "Species_custom" into a factor, ordered according to production weight
# with "Other" at the end
# This just makes the visualisations a bit nicer and more intuitive and consistent
custom_species_order <- aggregate(Individuals_slaughtered~Species_custom,FUN=sum,na.rm=T,data=fao_quantity)
custom_species_order_vector <- custom_species_order[order(-custom_species_order$Individuals_slaughtered),"Species_custom"]
custom_species_order_vector <- custom_species_order_vector[-which(custom_species_order_vector=="Other")]
custom_species_order_vector <- c(custom_species_order_vector,"Other")
fao_quantity$Species_custom <- factor(fao_quantity$Species_custom,
levels=custom_species_order_vector)
fao_allyears$Species_custom <- factor(fao_allyears$Species_custom,
levels=custom_species_order_vector)
####################################
### Visualise data for main page ###
####################################
# Aggregate individuals slaughtered by country
production_individuals <- aggregate(Individuals_slaughtered~ISO2_Code,FUN=sum,data=fao_quantity,na.rm=T)
production_individuals <- merge(production_individuals,production_countries,
by="ISO2_Code",
all=T)
# Make a map!
# Obtain the spatial vector data of all international borders
# The scale = 50 ensures we also obtain the very small countries
# This is essential for Malta!
spatial_countries <- ne_countries(scale=50)
# Restrict that set of international borders to the countries that
# we have specified
spatial_countries <- spatial_countries[which(spatial_countries$iso_a2_eh %in% production_countries$ISO2_Code),]
# Add the aggregated production data to the spatial vector data
spatial_countries <- merge(spatial_countries,production_individuals,
by.x="iso_a2_eh",by.y="ISO2_Code",
all=T)
# Produce a pretty map
map_production <- ggplot() +
geom_spatvector(aes(fill=Individuals_slaughtered),data=spatial_countries) +
xlim(-10,45) +
ylim(35,70) +
scale_fill_viridis_c(trans = "log",
option="rocket",
direction=-1,
labels = unit_format(unit = "M", scale = 1e-6),
breaks = breaks_log(n=6)) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position="bottom",
plot.background = element_rect(fill="white",colour="white")) +
guides(fill = guide_colorbar(barwidth = 25))+
labs(title="Individuals slaughtered",
subtitle=production_recent_year,
fill=NULL)
# Save to file
ggsave("~/finsight/assets/images/map_production.png",
map_production,
width=6,height=6)
# Also make a transparent version to save to file
map_production_transparent <- map_production +
theme(
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') #transparent legend panel
)
ggsave("results/map_production_transparent.png",map_production_transparent,width=6,height=6,bg='transparent')
setwd("~/finsight")
ggsave("~/finsight/assets/images/map_production_transparent.png",map_production_transparent,width=6,height=6,bg='transparent')
# Also make a transparent version to save to file
map_production_transparent <- map_production +
theme(
panel.background = element_rect(fill='transparent',color='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent',color='transparent'), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent',color='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent',color='transparent') #transparent legend panel
)
ggsave("~/finsight/assets/images/map_production_transparent.png",map_production_transparent,width=6,height=6,bg='transparent')
